export build_tarballs, autobuild, print_buildjl, product_hashes_from_github_release, build
import GitHub: gh_get_json, DEFAULT_API
import SHA: sha256

"""
    build_tarballs(ARGS, src_name, src_version, sources, script, platforms,
                   products, dependencies; kwargs...)

This should be the top-level function called from a `build_tarballs.jl` file.
It takes in the information baked into a `build_tarballs.jl` file such as the
`sources` to download, the `products` to build, etc... and will automatically
download, build and package the tarballs, generating a `build.jl` file when
appropriate.  Note that `ARGS` should be the top-level Julia `ARGS` command-
line arguments object.  This function does some rudimentary parsing of the
`ARGS`, call it with `--help` in the `ARGS` to see what it can do.
"""
function build_tarballs(ARGS, src_name, src_version, sources, script,
                        platforms, products, dependencies; kwargs...)
    # See if someone has passed in `--help`, and if so, give them the
    # assistance they so clearly long for
    if "--help" in ARGS
        println(strip("""
        Usage: build_tarballs.jl [target1,target2,...] [--only-buildjl]
                                 [--verbose] [--help]

        Options:
            targets         By default `build_tarballs.jl` will build a tarball
                            for every target within the `platforms` variable.
                            To override this, pass in a list of comma-separated
                            target triplets for each target to be built.  Note
                            that this can be used to build for platforms that
                            are not listed in the 'default list' of platforms
                            in the build_tarballs.jl script.

            --part=n/m      For breaking up long builds into multiple jobs,
                            divides the `platforms` list into `m` roughly
                            equal parts and then only builds part `n`
                            (`1 ≤ n ≤ m`).  (Does not produce `build.jl`,
                            which must be generated by a later
                            `--only-buildjl` stage.)

            --verbose       This streams compiler output to stdout during the
                            build which can be very helpful for finding bugs.
                            Note that it is colorized if you pass the
                            --color=yes option to julia, see examples below.

            --debug         This causes a failed build to drop into an
                            interactive bash shell for debugging purposes.

            --only-buildjl  This disables building of any tarballs, and merely
                            reconstructs a `build.jl` file from a github
                            release.  This is mostly useful as a later stage in
                            a travis/github releases autodeployment setup.

            --help          Print out this message.

        Examples:
            julia --color=yes build_tarballs.jl --verbose
                This builds all tarballs, with colorized output.

            julia build_tarballs.jl x86_64-linux-gnu,i686-linux-gnu
                This builds two tarballs for the two platforms given, with a
                minimum of output messages.
        """))
        return nothing
    end

    function check_flag(flag)
        flag_present = flag in ARGS
        ARGS = filter!(x -> x != flag, ARGS)
        return flag_present
    end

    # This sets whether we should build verbosely or not
    verbose = check_flag("--verbose")

    # This sets whether we drop into a debug shell on failure or not
    debug = check_flag("--debug")

    # This flag skips actually building and instead attempts to reconstruct a
    # build.jl from a GitHub release page.  Use this to automatically deploy a
    # build.jl file even when sharding targets across multiple CI builds.
    only_buildjl = check_flag("--only-buildjl")

    # --part=n/m builds only part n out of m divisions
    # of the platforms list.
    i = findlast(x -> startswith(x, "--part="), ARGS)
    should_override_platforms = i !== nothing
    if should_override_platforms
        if i != findfirst(x -> startswith(x, "--part="), ARGS)
            error("multiple --part arguments are not allowed")
        end
        p = parse.(Int, split(ARGS[i][8:end], '/'))
        (length(p) == 2 && p[2] > 0 && 1 ≤ p[1] ≤ p[2]) || error("invalid argument ", ARGS[i])
        n = (length(platforms) + p[2]-1) ÷ p[2]
        platforms = platforms[n*(p[1]-1)+1:min(end,n*p[1])]
        deleteat!(ARGS, i)
    end

    # If the user passed in a platform (or a few, comma-separated) on the
    # command-line, use that instead of our default platforms
    if length(ARGS) > 0
        should_override_platforms = true
        platforms = platform_key_abi.(split(ARGS[1], ","))
    end

    # If we're running on CI (Travis, GitLab CI, etc...) and this is a
    # tagged release, automatically determine bin_path by building up a URL
    repo = get_repo_name()
    tag = get_tag_name()

    product_hashes = if !only_buildjl
        # If the user didn't just ask for a `build.jl`, go ahead and actually build
        @info("Building for $(join(triplet.(platforms), ", "))")

        # Build the given platforms using the given sources
        autobuild(pwd(), src_name, src_version, sources, script, platforms,
                         products, dependencies; verbose=verbose, debug=debug, kwargs...)
    else
        msg = strip("""
        Reconstructing product hashes from GitHub Release $(repo)/$(tag)
        """)
        @info(msg)

        # Reconstruct product_hashes from github
        product_hashes_from_github_release(repo, tag;
            product_filter="v$(src_version)",
            verbose=verbose
        )
    end

    # If we didn't override the default set of platforms OR we asked for only
    # a build.jl file, then write one out.  We don't write out when overriding
    # the default set of platforms because that is typically done either while
    # testing, or when we have sharded our tarball construction over multiple
    # invocations.
    if !should_override_platforms || only_buildjl
        # The location the binaries will be available from
        bin_path = "https://github.com/$(repo)/releases/download/$(tag)"

        # A dummy prefix to pass through products()
        dummy_products = products(Prefix(pwd()))
        print_buildjl(pwd(), src_name, src_version, dummy_products,
                      product_hashes, bin_path)

        if verbose
            @info("Writing out the following reconstructed build.jl:")
            print_buildjl(Base.stdout, dummy_products, product_hashes, bin_path)
        end
    end

    return product_hashes
end

# Helper function to get things from ENV, returning `nothing`
# if they either don't exist or are empty
function get_ENV(key)
    if !haskey(ENV, key)
        return nothing
    end

    if isempty(ENV[key])
        return nothing
    end

    return ENV[key]
end

function get_repo_name()
    # Helper function to synthesize repository slug from environment variables
    function get_gitlab_repo_name()
        owner = get_ENV("CI_REPO_OWNER")
        name = get_ENV("CI_REPO_NAME")
        if owner != nothing && name != nothing
            return "$(owner)/$(name)"
        end
        return nothing
    end

    # Helper function to guess repository slug from git remote URL
    function read_git_origin()
        try
            repo = LibGit2.GitRepo(".")
            url = LibGit2.url(LibGit2.get(LibGit2.GitRemote, repo, "origin"))
            owner = basename(dirname(url))
            if occursin(":", owner)
                owner = owner[findlast(isequal(':'), owner)+1:end]
            end
            name = basename(url)
            if endswith(name, ".git")
                name = name[1:end-4]
            end
            return "$(owner)/$(name)"
        catch
        end
        return nothing
    end

    return something(
        get_ENV("TRAVIS_REPO_SLUG"),
        get_gitlab_repo_name(),
        read_git_origin(),
        "<repo owner>/<repo name>",
    )
end

function get_tag_name()
    # Helper function to guess tag from current commit taggedness
    function read_git_tag()
        try
            repo = LibGit2.GitRepo(".")
            head_gitsha = LibGit2.GitHash(LibGit2.head(repo))
            for tag in LibGit2.tag_list(repo)
                tag_gitsha = LibGit2.GitHash(LibGit2.GitCommit(repo, tag))
                if head_gitsha == tag_gitsha
                    return tag
                end
            end
        catch
        end
        return nothing
    end

    return something(
        get_ENV("TRAVIS_TAG"),
        get_ENV("CI_COMMIT_TAG"),
        read_git_tag(),
        "<tag>",
    )
end

"""
    autobuild(dir::AbstractString, src_name::AbstractString,
              src_version::VersionNumber, sources::Vector,
              script::AbstractString, platforms::Vector,
              products::Function, dependencies::Vector;
              verbose::Bool = true, kwargs...)

Runs the boiler plate code to download, build, and package a source package
for a list of platforms.  `src_name` represents the name of the source package
being built (and will set the name of the built tarballs), `platforms` is a
list of platforms to build for, `sources` is a list of tuples giving
`(url, hash)` of all sources to download and unpack before building begins,
`script` is a string representing a `bash` script to run to build the desired
products, which are listed as `Product` objects within the vector returned by
the `products` function. `dependencies` gives a list of dependencies that
provide `build.jl` files that should be installed before building begins to
allow this build process to depend on the results of another build process.
Setting `debug` to `true` will cause a failed build to drop into an interactive
shell so that the build can be inspected easily.
"""
function autobuild(dir::AbstractString,
                   src_name::AbstractString,
                   src_version::VersionNumber,
                   sources::Vector,
                   script::AbstractString,
                   platforms::Vector,
                   products::Function,
                   dependencies::Vector;
                   verbose::Bool = true,
                   kwargs...)
    # If we're on CI and we're not verbose, schedule a task to output a "." every few seconds
    if (haskey(ENV, "TRAVIS") || haskey(ENV, "CI")) && !verbose
        run_travis_busytask = true
        travis_busytask = @async begin
            # Don't let Travis think we're asleep...
            @info("Brewing a pot of coffee for Travis...")
            while run_travis_busytask
                sleep(4)
                print(".")
            end
        end
    end

    # This is what we'll eventually return
    product_hashes = Dict()

    # If we end up packaging any local directories into tarballs, we'll store them here
    mktempdir() do tempdir
        # We must prepare our sources.  Download them, hash them, etc...
        sources = Any[s for s in sources]
        for idx in 1:length(sources)
            # If the given source is a local path that is a directory, package it up and insert it into our sources
            if typeof(sources[idx]) <: AbstractString
                if !isdir(sources[idx])
                    error("Sources must either be a pair (url => hash) or a local directory")
                end

                # Package up this directory and calculate its hash
                tarball_path = joinpath(tempdir, basename(sources[idx]) * ".tar.gz")
                package(sources[idx], tarball_path; verbose=verbose)
                tarball_hash = open(tarball_path, "r") do f
                    bytes2hex(sha256(f))
                end

                # Move it to a filename that has the hash as a part of it (to avoid name collisions)
                tarball_pathv = joinpath(tempdir, string(tarball_hash, "-", basename(sources[idx]), ".tar.gz"))
                mv(tarball_path, tarball_pathv)

                # Now that it's packaged, store this into sources[idx]
                sources[idx] = (tarball_pathv => tarball_hash)
            elseif typeof(sources[idx]) <: Pair
                src_url, src_hash = sources[idx]

                # If it's a .git url, clone it
                if endswith(src_url, ".git")
                    src_path = storage_dir("downloads", basename(src_url))

                    # If this git repository already exists, ensure that its origin remote actually matches
                    if isdir(src_path)
                        origin_url = LibGit2.with(LibGit2.GitRepo(src_path)) do repo
                            LibGit2.url(LibGit2.get(LibGit2.GitRemote, repo, "origin"))
                        end

                        # If the origin url doesn't match, wipe out this git repo.  We'd rather have a
                        # thrashed cache than an incorrect cache.
                        if origin_url != src_url
                            rm(src_path; recursive=true, force=true)
                        end
                    end

                    if isdir(src_path)
                        # If we didn't just mercilessly obliterate the cached git repo, use it!
                        LibGit2.with(LibGit2.GitRepo(src_path)) do repo
                            LibGit2.fetch(repo)
                        end
                    else
                        # If there is no src_path yet, clone it down.
                        repo = LibGit2.clone(src_url, src_path; isbare=true)
                    end
                else
                    if isfile(src_url)
                        # Immediately abspath() a src_url so we don't lose track of
                        # sources given to us with a relative path
                        src_path = abspath(src_url)

                        # And if this is a locally-sourced tarball, just verify
                        verify(src_path, src_hash; verbose=verbose)
                    else
                        # Otherwise, download and verify
                        src_path = storage_dir("downloads", basename(src_url))
                        download_verify(src_url, src_hash, src_path; verbose=verbose)
                    end
                end

                # Now that it's downloaded, store this into sources[idx]
                sources[idx] = (src_path => src_hash)
            else
                error("Sources must be either a `URL => hash` pair, or a path to a local directory")
            end
        end

        # Our build products will go into ./products
        out_path = joinpath(dir, "products")
        try mkpath(out_path) catch; end

        for platform in platforms
            target = triplet(platform)

            # We build in a platform-specific directory
            build_path = joinpath(pwd(), "build", target)
            try mkpath(build_path) catch; end

            src_paths, src_hashes = collect(zip(sources...))

            # Convert from tuples to arrays, if need be
            src_paths = collect(src_paths)
            src_hashes = collect(src_hashes)
            prefix, ur = setup_workspace(
                build_path,
                src_paths,
                src_hashes,
                dependencies,
                platform;
                verbose=verbose,
                downloads_dir=storage_dir("downloads"),
            )

            # Don't keep the downloads directory around
            rm(joinpath(prefix, "downloads"); force=true, recursive=true)

            # Collect dependency manifests so that our auditing doesn't touch these files that
            # were installed by dependencies
            manifest_dir = joinpath(prefix, "manifests")
            dep_manifests = if isdir(manifest_dir)
               [joinpath(prefix, "manifests", f) for f in readdir(manifest_dir)]
            else
                String[]
            end

            build(ur, src_name, products(prefix), script, platform, prefix;
                  verbose=verbose, ignore_manifests=dep_manifests, kwargs...)

            # Remove the files of any dependencies
            for dependency in dependencies
                dep_script = script_for_dep(dependency, prefix.path)[1]
                m = Module(:__anon__)
                Core.eval(m, quote
                    using BinaryProvider
                    # Override BinaryProvider functionality so that it doesn't actually install anything
                    platform_key() = $platform
                    platform_key_abi() = $platform
                    function write_deps_file(args...; kwargs...); end
                    function install(args...; kwargs...); end

                    # Include build.jl file to extract download_info
                    ARGS = [$(prefix.path)]
                end)
                include_string(m, dep_script)
                Core.eval(m, quote
                    # Grab the information we need in order to extract a manifest, then uninstall it
                    url, hash = choose_download(download_info, platform_key_abi())
                    manifest_path = BinaryProvider.manifest_from_url(url; prefix=prefix)
                    BinaryProvider.uninstall(manifest_path; verbose=$verbose)
                end)
            end

            # Once we're built up, go ahead and package this prefix out
            tarball_path, tarball_hash = package(
                prefix,
                joinpath(out_path, src_name),
                src_version;
                platform=platform,
                verbose=verbose,
                force=true,
            )
            product_hashes[target] = (basename(tarball_path), tarball_hash)

            # Destroy the workspace
            rm(dirname(prefix.path); recursive=true)

            # If the whole build_path is empty, then remove it too.  If it's not, it's probably
            # because some other build is doing something simultaneously with this target, and we
            # don't want to mess with their stuff.
            if isempty(readdir(build_path))
                rm(build_path; recursive=true)
            end
        end
    end

    if (haskey(ENV, "TRAVIS") || haskey(ENV, "CI")) && !verbose
        run_travis_busytask = false
        wait(travis_busytask)
        println()
    end

    # Return our product hashes
    return product_hashes
end

function build(runner::Runner, name::AbstractString,
               products::Vector{P}, script::AbstractString,
               platform::Platform, prefix::Prefix;
               verbose::Bool = false, force::Bool = false,
               autofix::Bool = true, ignore_audit_errors::Bool = true,
               skip_audit::Bool = false,
               ignore_manifests::Vector = [], debug::Bool = false) where {P <: Product}
    # First, look to see whether our products are satisfied or not
    if isempty(products)
        # If we've been given no products, always build and always say it's satisfied
        s = product -> true
        should_build = true
    else
        s = p -> satisfied(p; verbose=verbose, platform=platform, isolate=true)
        should_build = !all(s(p) for p in products)
    end

    # If it is not satisfied, (or we're forcing the issue) build it
    if force || should_build
        # Verbose mode tells us what's going on
        if verbose
            if !should_build
                @info("Force-building $(name) despite its satisfaction")
            else
                @info("Building $(name) as it is unsatisfied")
            end
        end

        # We setup our bash session to do three things:
        #   - Save bash history on every command issued (so we have a fake ~/.bash_history)
        #   - Save environment on quit (so that we can regenerate all environment variables
        #     when we're debugging, etc...)
        #   - Copy the current srcdir over to disk if something breaks.  This is done so
        #     that if we want to debug a build halfway through, we can get at it.  We normally
        #     build with a tmpfs mounted at `$WORKSPACE/srcdir`.
        trapped_script = """
        alias ll='ls -la'

        vecho() {
            if [[ "$(verbose)" == "true" ]]; then
                echo "\$@"
            fi
        }
        vecho_red() {
            (vecho "\$@" >&2)
        }

        # Save bash history (and optionally echo it out as it happens)
        save_history() {
            vecho_red " ---> \$BASH_COMMAND"
            history -s "\$BASH_COMMAND"
            history -a
        }

        # Save our environment into `/meta/.env`, eliminating read-only variables
        # so that this file can be sourced upon entering a debug shell.
        save_env() {
            set +x
            set > /meta/.env
            # Ignore read-only variables
            for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do
                grep -v "^\$l=" /meta/.env > /meta/.env2
                mv /meta/.env2 /meta/.env
            done
            echo "cd \$(pwd)" >> /meta/.env
        }

        # We do a little sleight-of-hand here; we want to build inside of a tmpfs
        # because `srcdir` might be mapped in through a networked filesystem, which
        # totally wrecks our I/O performance.  So what we do instead is bind-mount
        # `srcdir` to another location so that we can always get at it, copy its
        # contents to a new tmpfs we mount at the location of `srcdir`, then when
        # we exit on an error, we copy everything back over again
        tmpify_srcdir() {
            vecho "Copying srcdir to tmpfs..."
            mkdir -p \$WORKSPACE/.true_srcdir
            mount --bind \$WORKSPACE/srcdir \$WORKSPACE/.true_srcdir
            mount -t tmpfs tmpfs \$WORKSPACE/srcdir
            rsync -rlptD \$WORKSPACE/.true_srcdir/ \$WORKSPACE/srcdir

            # We may have changed what pwd() means out from underneath ourselves
            cd \$(pwd)
        }

        # Copy our tmpfs version of `srcdir` back onto disk.
        save_srcdir() {
            vecho_red "Saving srcdir due to previous error..."
            rsync -rlptD \$WORKSPACE/srcdir/ \$WORKSPACE/.true_srcdir --delete
        }

        # If /meta is mounted, then we want to save history and environment
        if [[ -d /meta ]]; then
            trap save_history DEBUG
            trap "save_env" EXIT
            trap "save_env; save_srcdir" INT TERM ERR
        fi

        # Stop if we hit any errors.
        set -e

        # Swap out srcdir from underneath our feet
        tmpify_srcdir

        $(script)
        """

        logpath = joinpath(logdir(prefix), "$(name).log")
        did_succeed = run(runner, `/bin/bash -c $(trapped_script)`, logpath; verbose=verbose)
        if !did_succeed
            if debug
                @warn("Build failed, launching debug shell")
                run_interactive(runner, `/bin/bash --init-file /meta/.env`)
            end
            msg = "Build for $(name) on $(triplet(platform)) did not complete successfully\n"
            error(msg)
        end

        # Run an audit of the prefix to ensure it is properly relocatable
        if !skip_audit
            audit_result = audit(prefix; platform=platform,
                                 verbose=verbose, autofix=autofix,
                                 ignore_manifests=ignore_manifests) 
            if !audit_result && !ignore_audit_errors
                msg = replace("""
                Audit failed for $(prefix.path).
                Address the errors above to ensure relocatability.
                To override this check, set `ignore_audit_errors = true`.
                """, '\n' => ' ')
                error(strip(msg))
            end
        end

        # Finally, check to see if we are now satisfied
        if !all(s(p) for p in products)
            if verbose
                @warn("Built $(name) but still unsatisfied!")
            end
        end
    elseif !should_build && verbose
        @info("Not building as $(name) is already satisfied")
    end
    return true
end


"""
    output_jll_package()

Construct a ``.jll` package that can be used to download and present the build
products to the seething masses.
"""
function output_jll_package(path::AbstractString, name::AbstractString,
                       products::Vector, tarball_hashes::Dict,
                       dependencies::Vector, artifacts_path::AbstractString;
                       _source_fallback = nothing)

    # We really don't like the "build from source" fallback, but compatibility
    # has to reign as king.
    _source_fallback = something(_source_fallback,
    """
            # If we don't have a compatible .tar.gz to download, complain.
            # Alternatively, you could attempt to install from a separate provider,
            # build from source or something even more ambitious here.
            error("Your platform (\\\"\$(Sys.MACHINE)\\\", parsed as \\\"\$(triplet(platform_key_abi()))\\\") is not supported by this package!")
    """)

    lib_products = [p for p in products if isa(p, LibraryProduct)]
    exe_products = [p for p in products if isa(p, ExecutableProduct)]

    # We have only a single source file.  We will define exports for all given
    # `products`, define the logic for locating and determining these products,
    # and finally 
    mkpath(joinpath(path, "src"))
    open(joinpath(path, "src", "$(name).jl"), "w") do io
        write(io, """# This package autogenerated by BinaryBuilder.jl
        module $(name)

        # We always require BP and Libdl
        using BinaryProvider, Libdl
        """)

        if !isempty(dependencies)
            write(io, """
            # Bring in dependencies
            using $(join(unique(dependencies), ", "))
            """)
        end

        write(io, """
        # Export each product accessor (functions, strings, handles, etc...)
        export $(join(variable_name.(products), ", "))

        # Generate underscore-prefixed variable names that map to file locations
        $(join(["_$(variable_name(p)) = nothing" for p in products], "\n"))

        # Convenience function to get the current directory
        moddir() = dirname(something(pathof(@__MODULE__), @__FILE__))

        # Executables push their dirnames onto PATH, on all platforms
        function update_exe_vars!(PATH::Vector{String} = String[])
            update_deps_exe_vars!(PATH)
            # Embed our own executable product paths
            for p in ($(join("_" .* variable_name.(exe_products), ", ")))
                push!(PATH, dirname(p))
            end
            return unique!(PATH)
        end

        # Library products push their dirnames onto a variable that
        # depends on the current platform, that variable name is handled
        # by the calling funciton, `envvars()`
        function update_lib_vars!(LIBPATH::Vector{String} = String[])
            update_deps_lib_vars!(LIBPATH)
            # Embed our own library product paths
            for p in ($(join("_" .* variable_name.(lib_products), ", ")),)
                push!(LIBPATH, dirname(p))
            end
            return unique!(LIBPATH)
        end

        # Same as above, but for dependencies
        function update_deps_exe_vars!(PATH::Vector{String} = String[])
            $(join(("    $(d).update_exe_vars!(PATH)" for d in dependencies), "\n"))
            return PATH
        end
        function update_deps_lib_vars!(LIBPATH::Vector{String} = String[])
            $(join(("    $(d).update_lib_vars!(LIBPATH)" for d in dependencies), "\n"))
            return LIBPATH
        end


        # Helper functions for dealing with environment variables
        splitenv(l) = filter(!isempty, split(l, Sys.iswindows() ? ";" : ":"))
        joinenv(l) = join(l, Sys.iswindows() ? ";" : ":")
        function libpath_env()
            if Sys.iswindows()
                return "PATH"
            elseif Sys.isapple()
                return "DYLD_FALLBACK_LIBRARY_PATH"
            else
                return "LD_LIBRARY_PATH"
            end
        end

        # Define the environment variables that must be set for the binaries
        # to find their necessary dependencies.  We slap the dirname of every
        # library product onto `LD_LIBRARY_PATH`.  We insert the dirname of
        # every executable product onto `PATH`, etc...
        #
        # This method returns a `Dict` of environment mappings containing the
        # mapping necessary for this package and all dependencies, that should
        # be dynamically integrated into the current environment variables.
        _envvar_cache = nothing
        function envvars()
            global _envvar_cache

            # If we've already cached this work, don't do it again
            if _envvar_cache != nothing
                return _envvar_cache
            else
                _envvar_cache = Dict()
            end

            # Initialize the PATH to those paths specific to just our package
            _envvar_cache["PATH"] = update_exe_vars!()

            # For libraries, if we're on windows we merge it into PATH:
            if Sys.iswindows()
                update_lib_vars!(_envvar_cache["PATH"])
            else
                # Otherwise, it's a separate environment variable
                _envvar_cache[libpath_env()] = update_lib_vars!()
            end

            return _envvar_cache
        end

        # Given ENV and envvars(), merge them to create a withenv and
        # apply that to `f` to run the function within an appropriate ENV
        function with_merged_envs(f::Function, envs = envvars())
            merged_mapping = Pair[]
            for (k, v) in envs
                push!(merged_mapping,
                    k => joinenv(vcat(splitenv(get(ENV, k, "")), v))
                )
            end

            return withenv(f, merged_mapping...)
        end

        function products(prefix::Prefix)
            return products = [
                $(join((repr(p) for p in products), ",\n"))
            ]
        end

        # Download and install the binaries
        function build(;
                prefix::Prefix = Prefix(joinpath(moddir(), "..", "usr")),
                verbose::Bool = false,
            )
            # These are the 'location variables' that we locate() at the end
            global $(join("_" .* variable_name.(products), ", "))
            
            # Download binaries from hosted location
            bin_prefix = $(repr(artifacts_path))

            download_info = Dict(
        """)

        # Write out `download_info`
        for platform in sort(collect(keys(tarball_hashes)))
            fname, hash = tarball_hashes[platform]
            pkey = platform_key_abi(platform)
            write(io, " "^8 * "$pkey => (\"\$bin_prefix/$fname\", \"$hash\"),\n")
        end
        
        write(io, """
            )

            ps = products(prefix)
            unsatisfied = any(!satisfied(p; verbose=verbose) for p in ps)

            dl_info = choose_download(download_info, platform_key_abi())
            if dl_info === nothing && unsatisfied
                $(_source_fallback)
            end

            # If we have a download, and we are unsatisfied (or the version we're
            # trying to install is not itself installed) then load it up!
            if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
                # Download and install binaries
                install(dl_info...; prefix=prefix, force=true, verbose=verbose)
            end

            # Write out a deps.jl file that will contain mappings for our products
            #depsjl_path = joinpath(moddir(), "deps.jl")
            #write_deps_file(depsjl_path, ps, verbose=verbose)

            # Actually, just locate them every time for now, using our amazing
            # prescience, knowing which index corresponds to which variable name,
            # saving ourselves the hassle of an eval(). (Eventually this could be
            # baked into a deps.jl file).  Note that we need to have our library
            # path for dependencies set properly here, otherwise we won't be able
            # to satisfy things properly.
            locate_libenv = Dict(
                libpath_env() => update_deps_lib_vars!()
            )
            if verbose
                display(locate_libenv)
            end
            with_merged_envs(locate_libenv) do
        """)
        
        for idx in 1:length(products)
            v = variable_name(products[idx])
            write(io, "        _$(v) = locate(ps[$idx]; verbose=verbose)\n")
        end
        write(io, "    end\nend\n\n") # close with_merged_envs() and __init__()

        function gen_export(io::IO, p::LibraryProduct)
            v = variable_name(p)
            write(io, """
            # `$(v)` is a LibraryProduct, which is exported as
            # a handle that dlopen()'s 
            $(v)(; kwargs...) = dlopen(_$(v), RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL; kwargs...)
            """)
        end

        function gen_export(io::IO, p::ExecutableProduct)
            v = variable_name(p)
            write(io, """
            # `$(v)` is an ExecutableProduct, which is exported as
            # a function that defines the proper nested environment variables and
            # runs the given commands/runs a given function within the appropriate
            # environment (e.g. with `PATH` and `LD_LIBRARY_PATH` set)
            function $(v)(args...)
                cmd = `\$(_$(v))`
                for arg in args
                    cmd = `\$cmd \$arg`
                end
                return with_merged_envs(x -> run(cmd))
            end
            """)
        end

        function gen_export(io::IO, p::FileProduct)
            write(io, """
            # `$(variable_name(p))` is a FileProduct, which is exported as a path.
            $(variable_name(p))() = _$(variable_name(p))
            """)
        end

        # For each product, we locate and update the relevant global variable
        gen_export.(Ref(io), products)
        
        write(io, """

        # Our __init__() function attempts to open `deps.jl`, then checks each
        # dependency to ensure it can be satisfied.  If anything goes wrong, we
        # regenerate `deps.jl` and try again.
        function __init__()
            # We want other packages to be able to use us to get our metadata,
            # so provide a global turn-off switch to skip automatic install
            if get(ENV, "BINARYPROVIDER_SKIP_AUTO_INSTALL", "") == "true"
                return
            end

            # Otherwise, auto-install our products
            build()

        """)
        
        if !isempty(lib_products)
            write(io, "    # Force-load all library products (for now)\n")
            for p in lib_products
                write(io, "    $(variable_name(p))()\n")
            end
        end

        write(io, """
        end

        end # module
        """)
    end

    # Generate a `.gitignore`
    open(joinpath(path, ".gitignore"), "w") do io
        write(io, """
        usr/
        src/deps.jl
        """)
    end
end


function print_buildjl(io::IO, products::Vector, product_hashes::Dict,
                       bin_path::AbstractString)
    print(io, """
    using BinaryProvider # requires BinaryProvider 0.3.0 or later

    # Parse some basic command-line arguments
    const verbose = "--verbose" in ARGS
    const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
    """)

    # Print out products
    print(io, "products = [\n")
    for prod in products
        print(io, "    $(repr(prod)),\n")
    end
    print(io, "]\n\n")

    # Print binary locations/tarball hashes
    print(io, """
    # Download binaries from hosted location
    bin_prefix = "$bin_path"

    # Listing of files generated by BinaryBuilder:
    """)

    println(io, "download_info = Dict(")
    for platform in sort(collect(keys(product_hashes)))
        fname, hash = product_hashes[platform]
        pkey = platform_key_abi(platform)
        println(io, "    $(pkey) => (\"\$bin_prefix/$(fname)\", \"$(hash)\"),")
    end
    println(io, ")\n")

    print(io, """
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
    dl_info = choose_download(download_info, platform_key_abi())
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\\\"\$(Sys.MACHINE)\\\", parsed as \\\"\$(triplet(platform_key_abi()))\\\") is not supported by this package!")
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end

    # Write out a deps.jl file that will contain mappings for our products
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
    """)
end

function print_buildjl(build_dir::AbstractString, src_name::AbstractString,
                       src_version::VersionNumber, products::Vector,
                       product_hashes::Dict, bin_path::AbstractString)
    mkpath(joinpath(build_dir, "products"))
    open(joinpath(build_dir, "products", "build_$(src_name).v$(src_version).jl"), "w") do io
        print_buildjl(io, products, product_hashes, bin_path)
    end
end

"""
If you have a sharded build on Github, it would be nice if we could get an auto-generated
`build.jl` just like if we build serially.  This function eases the pain by reconstructing
it from a releases page.
"""
function product_hashes_from_github_release(repo_name::AbstractString, tag_name::AbstractString;
                                            product_filter::AbstractString = "",
                                            verbose::Bool = false)
    # Get list of files within this release
    release = gh_get_json(DEFAULT_API, "/repos/$(repo_name)/releases/tags/$(tag_name)", auth=github_auth())

    # Try to extract the platform key from each, use that to find all tarballs
    function can_extract_platform(filename)
        # Short-circuit build.jl because that's quite often there.  :P
        if startswith(filename, "build") && endswith(filename, ".jl")
            return false
        end

        unknown_platform = typeof(extract_platform_key(filename)) <: UnknownPlatform
        if unknown_platform && verbose
            @info("Ignoring file $(filename); can't extract its platform key")
        end
        return !unknown_platform
    end
    assets = [a for a in release["assets"] if can_extract_platform(a["name"])]
    assets = [a for a in assets if occursin(product_filter, a["name"])]

    # Download each tarball, hash it, and reconstruct product_hashes.
    product_hashes = Dict()
    mktempdir() do d
        for asset in assets
            # For each asset (tarball), download it
            filepath = joinpath(d, asset["name"])
            url = asset["browser_download_url"]
            BinaryProvider.download(url, filepath; verbose=verbose)

            # Hash it
            hash = open(filepath) do file
                return bytes2hex(sha256(file))
            end

            # Then fit it into our product_hashes
            file_triplet = triplet(extract_platform_key(asset["name"]))
            product_hashes[file_triplet] = (asset["name"], hash)

            if verbose
                @info("Calculated $hash for $(asset["name"])")
            end
        end
    end

    return product_hashes
end
